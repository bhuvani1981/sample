yaml- name: Prepare Angular 19 output for deployment
  run: |
    echo "Preparing Angular build output for deployment..."
    mkdir -p adjusted_dist
    
    if [ -d "dist/browser" ]; then
      echo "Detected Angular 19 structure, normalizing output..."
      
      # Copy all browser files to the root level using one command
      cp -r dist/browser/* adjusted_dist/
      
      # Copy any files at dist root if they exist (like server-side files)
      find dist -maxdepth 1 -type f -exec cp {} adjusted_dist/ \;
      
      # Ensure the assets directory exists with config subdirectory
      mkdir -p adjusted_dist/assets/config
      
    else
      # Standard structure - just copy everything
      cp -r dist/* adjusted_dist/
    fi
    
    # Ensure metadata tags are in index.html
    if [ -f "adjusted_dist/index.html" ] && ! grep -q "distributionFileName" adjusted_dist/index.html; then
      sed -i "2 i\<meta name=\"distributionFileName\" content=\"${{env.RELEASE_VERSION}}\"\>" adjusted_dist/index.html
      sed -i "2 i\<meta name=\"lastBuildDate\" content=\"${{env.lastBuildDate}}\"\>" adjusted_dist/index.html
      sed -i "2 i\<meta name=\"version\" content=\"${{env.version}}\"\>" adjusted_dist/index.html
    fi

- name: Prepare Package
  run: |
    tar czf ${{ env.RELEASE_VERSION }} -C ${{ github.workspace }}/adjusted_dist/ .
Simplified Ansible Deployment Script
yaml- name: deployARSWeb | Handle Angular 19 structure if present
  shell: |
    if [ -d "{{ release_path }}/browser" ]; then
      echo "Angular 19 structure detected, normalizing..."
      
      # Copy all browser content to the root level
      cp -r {{ release_path }}/browser/* {{ release_path }}/
      
      # Create necessary directories
      mkdir -p {{ release_path }}/assets/config
      
      # Clean up browser directory after copying
      rm -rf {{ release_path }}/browser
    fi
  args:
    executable: /bin/bash
  when: unzip_content.stdout | int > 1
  tags:
    - skip_ansible_lint



